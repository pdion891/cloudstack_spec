require 'fileutils'
require 'erb'

module CloudstackSpec
  class Setup
    def self.run

      create_initial
    end

    def self.create_initial
      print "Create base for cloudstack_spec? y/n: "
      auto_config = $stdin.gets.chomp
      if auto_config =~ (/(true|t|yes|y|1)$/i)
        [ 'spec', "spec/lib" ].each { |dir| safe_mkdir(dir) }
        safe_create_config
        safe_create_spec
        safe_create_spec_helper
#        safe_create_rakefile
        puts "Make sure to Update file: spec/config.yml"
      else
        exit
      end
    end

    def self.safe_create_config
      # create config.yml file.
      content = <<-EOF
cloudstack:
  url:        http://127.0.0.1:8080/client/api
  api_key:    c0dD7KjmFF4ixekZyQZJa7xPrW6y5-egZU1FGqq2u0DITs1qSluyP3giLDJ2msg0y1gPeARq4ZyvK-j48QP8hQ
  secret_key: GYfIZjsjSIHKO_227M6tvLns86QJEzqJVzc8xobqfgg03YeDUYk2QTGBgB6IeaHfSROW61uPm-koO2iDDvq5HQ
  use_ssl:    false

EOF

      if File.exists? "spec/config.yml"
        old_content = File.read("spec/config.yml")
        if old_content != content
          $stderr.puts "!! spec/config.yml already exists and differs from template"
        end
      else
        File.open("spec/config.yml", 'w') do |f|
          f.puts content
        end
        puts " + spec/config.yml"
      end
    end

    def self.safe_create_spec
      content = <<-EOF
require 'spec_helper'

describe zone do
  it { should exist }
  it { should be_allocated }
#  its(:local_storage) { should_not be_set }
#  its(:security_group) { should_not be_set }
#  its(:network_type) { should match("Advanced") }
end

%w(consoleproxy secondarystoragevm).each do |svm|
  describe system_vm(svm) do
    it { should exist }
    it { should be_running }
    it { should be_reachable }
  end
end

EOF

      if File.exists? "spec/lib/001_zone_spec.rb"
        old_content = File.read("spec/lib/001_zone_spec.rb")
        if old_content != content
          $stderr.puts "!! spec/lib/zone_spec.rb already exists and differs from template"
        end
      else
        File.open("spec/lib/001_zone_spec.rb", 'w') do |f|
          f.puts content
        end
        puts " + spec/lib/001_zone_spec.rb"
      end
    end

    def self.safe_mkdir(dir)
      if File.exists? dir
        unless File.directory? dir
          $stderr.puts "!! #{dir} already exists and is not a directory"
        end
      else
        FileUtils.mkdir dir
        puts " + #{dir}/"
      end
    end

    def self.safe_create_spec_helper
      requirements = []
      content = ERB.new(spec_helper_template, nil, '-').result(binding)
      if File.exists? 'spec/spec_helper.rb'
        old_content = File.read('spec/spec_helper.rb')
        if old_content != content
          $stderr.puts "!! spec/spec_helper.rb already exists and differs from template"
        end
      else
        File.open('spec/spec_helper.rb', 'w') do |f|
          f.puts content
        end
        puts ' + spec/spec_helper.rb'
      end
    end

    def self.safe_create_rakefile
      content = <<-EOF
require 'rake'
require 'rspec/core/rake_task'

task :spec    => 'spec:all'
task :default => :spec

namespace :spec do
  targets = []
  Dir.glob('./spec/*').each do |dir|
    next unless File.directory?(dir)
    targets << File.basename(dir)
  end

  task :all     => targets
  task :default => :all

  targets.each do |target|
    desc "Run serverspec tests to #{target}"
    RSpec::Core::RakeTask.new(target.to_sym) do |t|
      ENV['TARGET_HOST'] = target
      t.pattern = "spec/#{target}/*_spec.rb"
    end
  end
end

EOF
      if File.exists? 'Rakefile'
        old_content = File.read('Rakefile')
        if old_content != content
          $stderr.puts "!! Rakefile already exists and differs from template"
        end
      else
        File.open('Rakefile', 'w') do |f|
          f.puts content
        end
        puts ' + Rakefile'
      end
    end

    def self.spec_helper_template
      template = <<-EOF
# This file was generated by the `rspec --init` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# Require this file using `require "spec_helper"` to ensure that it is only
# loaded once.
#
# See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration
require 'yaml'
require 'cloudstack_ruby_client'
require 'uuid'
require 'cloudstack_spec'
require 'rspec/expectations'

require 'serverspec'
#require 'specinfra'
set :backend, :exec



RSpec.configure do |config|
  config.run_all_when_everything_filtered = true
#  config.filter_run :focus

  # Run specs in random order to surface order dependencies. If you find an
  # order dependency and want to debug it, you can fix the order by providing
  # the seed, which is printed after each run.
  #     --seed 1234
  config.order = 'defined'
  config.formatter = 'documentation'
  config.color = true
end

EOF
      template
    end

  end
end
